{"ast":null,"code":"export default function updateMutation(mutation, originalOffset, originalLength, newLength, prefixLength, suffixLength) {\n  // three cases we can reasonably adjust - disjoint mutations that\n  // happen later on where the offset will need to be changed,\n  // mutations that completely contain the new one where we can adjust\n  // the length, and mutations that occur partially within the new one.\n  var lengthDiff = newLength - originalLength;\n  var mutationAfterChange = originalOffset + originalLength <= mutation.offset;\n\n  if (mutationAfterChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + lengthDiff\n    });\n  }\n\n  var mutationContainsChange = originalOffset >= mutation.offset && originalOffset + originalLength <= mutation.offset + mutation.length;\n\n  if (mutationContainsChange) {\n    return Object.assign({}, mutation, {\n      length: mutation.length + lengthDiff\n    });\n  }\n\n  var mutationWithinPrefixChange = mutation.offset >= originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && prefixLength > 0;\n\n  if (mutationWithinPrefixChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength\n    });\n  }\n\n  var mutationContainsPrefix = mutation.offset < originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && mutation.offset + mutation.length > originalOffset && prefixLength > 0;\n\n  if (mutationContainsPrefix) {\n    return [Object.assign({}, mutation, {\n      length: originalOffset - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + prefixLength,\n      length: mutation.offset - originalOffset + mutation.length\n    })];\n  }\n\n  var mutationContainsSuffix = mutation.offset >= originalOffset && mutation.offset + mutation.length > originalOffset + originalLength && originalOffset + originalLength > mutation.offset && suffixLength > 0;\n\n  if (mutationContainsSuffix) {\n    return [Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength,\n      length: originalOffset + originalLength - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + originalLength + prefixLength + suffixLength,\n      length: mutation.offset + mutation.length - (originalOffset + originalLength)\n    })];\n  }\n\n  return mutation;\n}","map":{"version":3,"names":["updateMutation","mutation","originalOffset","originalLength","newLength","prefixLength","suffixLength","lengthDiff","mutationAfterChange","offset","Object","assign","mutationContainsChange","length","mutationWithinPrefixChange","mutationContainsPrefix","mutationContainsSuffix"],"sources":["/Users/macuser/Documents/amccar15.github.io/node_modules/draft-convert/esm/util/updateMutation.js"],"sourcesContent":["export default function updateMutation(mutation, originalOffset, originalLength, newLength, prefixLength, suffixLength) {\n  // three cases we can reasonably adjust - disjoint mutations that\n  // happen later on where the offset will need to be changed,\n  // mutations that completely contain the new one where we can adjust\n  // the length, and mutations that occur partially within the new one.\n  var lengthDiff = newLength - originalLength;\n  var mutationAfterChange = originalOffset + originalLength <= mutation.offset;\n\n  if (mutationAfterChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + lengthDiff\n    });\n  }\n\n  var mutationContainsChange = originalOffset >= mutation.offset && originalOffset + originalLength <= mutation.offset + mutation.length;\n\n  if (mutationContainsChange) {\n    return Object.assign({}, mutation, {\n      length: mutation.length + lengthDiff\n    });\n  }\n\n  var mutationWithinPrefixChange = mutation.offset >= originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && prefixLength > 0;\n\n  if (mutationWithinPrefixChange) {\n    return Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength\n    });\n  }\n\n  var mutationContainsPrefix = mutation.offset < originalOffset && mutation.offset + mutation.length <= originalOffset + originalLength && mutation.offset + mutation.length > originalOffset && prefixLength > 0;\n\n  if (mutationContainsPrefix) {\n    return [Object.assign({}, mutation, {\n      length: originalOffset - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + prefixLength,\n      length: mutation.offset - originalOffset + mutation.length\n    })];\n  }\n\n  var mutationContainsSuffix = mutation.offset >= originalOffset && mutation.offset + mutation.length > originalOffset + originalLength && originalOffset + originalLength > mutation.offset && suffixLength > 0;\n\n  if (mutationContainsSuffix) {\n    return [Object.assign({}, mutation, {\n      offset: mutation.offset + prefixLength,\n      length: originalOffset + originalLength - mutation.offset\n    }), Object.assign({}, mutation, {\n      offset: originalOffset + originalLength + prefixLength + suffixLength,\n      length: mutation.offset + mutation.length - (originalOffset + originalLength)\n    })];\n  }\n\n  return mutation;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}