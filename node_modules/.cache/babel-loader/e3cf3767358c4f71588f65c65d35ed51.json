{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the /src directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\nimport { List, OrderedSet, Map } from 'immutable';\nimport { ContentState, CharacterMetadata, ContentBlock, Entity, BlockMapBuilder, genKey, SelectionState } from 'draft-js';\nimport getSafeBodyFromHTML from './util/parseHTML';\nimport rangeSort from './util/rangeSort';\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // Arbitrary max indent\n\nvar MAX_DEPTH = 4; // used for replacing characters in HTML\n\n/* eslint-disable no-control-regex */\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_BLOCK_DELIMITER = new RegExp('\\r', 'g');\n/* eslint-enable no-control-regex */\n// Block tag flow is different because LIs do not have\n// a deterministic style ;_;\n\nvar blockTags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'blockquote', 'pre'];\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\n\nvar handleMiddleware = function handleMiddleware(maybeMiddleware, base) {\n  if (maybeMiddleware && maybeMiddleware.__isMiddleware === true) {\n    return maybeMiddleware(base);\n  }\n\n  return maybeMiddleware;\n};\n\nvar defaultHTMLToBlock = function defaultHTMLToBlock(nodeName, node, lastList) {\n  return undefined;\n};\n\nvar defaultHTMLToStyle = function defaultHTMLToStyle(nodeName, node, currentStyle) {\n  return currentStyle;\n};\n\nvar defaultHTMLToEntity = function defaultHTMLToEntity(nodeName, node) {\n  return undefined;\n};\n\nvar defaultTextToEntity = function defaultTextToEntity(text) {\n  return [];\n};\n\nvar nullthrows = function nullthrows(x) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error('Got unexpected null or undefined');\n};\n\nvar sanitizeDraftText = function sanitizeDraftText(input) {\n  return input.replace(REGEX_BLOCK_DELIMITER, '');\n};\n\nfunction getEmptyChunk() {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: []\n  };\n}\n\nfunction getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n\n  return {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities,\n    blocks: []\n  };\n}\n\nfunction getSoftNewlineChunk(block, depth) {\n  var flat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Map();\n\n  if (flat === true) {\n    return {\n      text: '\\r',\n      inlines: [OrderedSet()],\n      entities: new Array(1),\n      blocks: [{\n        type: block,\n        data: data,\n        depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n      }],\n      isNewline: true\n    };\n  }\n\n  return {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: []\n  };\n}\n\nfunction getBlockDividerChunk(block, depth) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Map();\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [{\n      type: block,\n      data: data,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    }]\n  };\n}\n\nfunction getBlockTypeForTag(tag, lastList) {\n  switch (tag) {\n    case 'h1':\n      return 'header-one';\n\n    case 'h2':\n      return 'header-two';\n\n    case 'h3':\n      return 'header-three';\n\n    case 'h4':\n      return 'header-four';\n\n    case 'h5':\n      return 'header-five';\n\n    case 'h6':\n      return 'header-six';\n\n    case 'li':\n      if (lastList === 'ol') {\n        return 'ordered-list-item';\n      }\n\n      return 'unordered-list-item';\n\n    case 'blockquote':\n      return 'blockquote';\n\n    case 'pre':\n      return 'code-block';\n\n    case 'div':\n    case 'p':\n      return 'unstyled';\n\n    default:\n      return null;\n  }\n}\n\nfunction baseCheckBlockType(nodeName, node, lastList) {\n  return getBlockTypeForTag(nodeName, lastList);\n}\n\nfunction processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    var htmlElement = node;\n    currentStyle = currentStyle.withMutations(function (style) {\n      if (htmlElement.style.fontWeight === 'bold') {\n        style.add('BOLD');\n      }\n\n      if (htmlElement.style.fontStyle === 'italic') {\n        style.add('ITALIC');\n      }\n\n      if (htmlElement.style.textDecoration === 'underline') {\n        style.add('UNDERLINE');\n      }\n\n      if (htmlElement.style.textDecoration === 'line-through') {\n        style.add('STRIKETHROUGH');\n      }\n    }).toOrderedSet();\n  }\n\n  return currentStyle;\n}\n\nfunction baseProcessInlineTag(tag, node) {\n  var inlineStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OrderedSet();\n  return processInlineTag(tag, node, inlineStyles);\n}\n\nfunction joinChunks(A, B) {\n  var flat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n\n  var firstInB = B.text.slice(0, 1);\n  var lastInA = A.text.slice(-1);\n  var adjacentDividers = lastInA === '\\r' && firstInB === '\\r';\n  var isJoiningBlocks = A.text !== '\\r' && B.text !== '\\r'; // when joining two full blocks like this we want to pop one divider\n\n  var addingNewlineToEmptyBlock = A.text === '\\r' && !A.isNewline && B.isNewline; // when joining a newline to an empty block we want to remove the newline\n\n  if (adjacentDividers && (isJoiningBlocks || addingNewlineToEmptyBlock)) {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  } // Kill whitespace after blocks if flat mode is on\n\n\n  if (A.text.slice(-1) === '\\r' && flat === true) {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (firstInB === SPACE || firstInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  var isNewline = A.text.length === 0 && B.isNewline;\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks),\n    isNewline: isNewline\n  };\n}\n/*\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\n\n\nfunction containsSemanticBlockMarkup(html) {\n  return blockTags.some(function (tag) {\n    return html.indexOf(\"<\".concat(tag)) !== -1;\n  });\n}\n\nfunction genFragment(node, inlineStyle, lastList, inBlock, fragmentBlockTags, depth, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, inEntity) {\n  var nodeName = node.nodeName.toLowerCase();\n  var newBlock = false;\n  var nextBlockType = 'unstyled'; // Base Case\n\n  if (nodeName === '#text') {\n    var text = node.textContent;\n\n    if (text.trim() === '' && inBlock === null) {\n      return getEmptyChunk();\n    }\n\n    if (text.trim() === '' && inBlock !== 'code-block') {\n      return getWhitespaceChunk(inEntity);\n    }\n\n    if (inBlock !== 'code-block') {\n      // Can't use empty string because MSWord\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    var entities = Array(text.length).fill(inEntity);\n    var offsetChange = 0;\n    var textEntities = checkEntityText(text, createEntity, getEntity, mergeEntityData, replaceEntityData).sort(rangeSort);\n    textEntities.forEach(function (_ref) {\n      var entity = _ref.entity,\n          offset = _ref.offset,\n          length = _ref.length,\n          result = _ref.result;\n      var adjustedOffset = offset + offsetChange;\n\n      if (result === null || result === undefined) {\n        result = text.substr(adjustedOffset, length);\n      }\n\n      var textArray = text.split('');\n      textArray.splice.bind(textArray, adjustedOffset, length).apply(textArray, result.split(''));\n      text = textArray.join('');\n      entities.splice.bind(entities, adjustedOffset, length).apply(entities, Array(result.length).fill(entity));\n      offsetChange += result.length - length;\n    });\n    return {\n      text: text,\n      inlines: Array(text.length).fill(inlineStyle),\n      entities: entities,\n      blocks: []\n    };\n  } // BR tags\n\n\n  if (nodeName === 'br') {\n    var _blockType = inBlock;\n\n    if (_blockType === null) {\n      //  BR tag is at top level, treat it as an unstyled block\n      return getSoftNewlineChunk('unstyled', depth, true);\n    }\n\n    return getSoftNewlineChunk(_blockType || 'unstyled', depth, options.flat);\n  }\n\n  var chunk = getEmptyChunk();\n  var newChunk = null; // Inline tags\n\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n  inlineStyle = processCustomInlineStyles(nodeName, node, inlineStyle); // Handle lists\n\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n\n    lastList = nodeName;\n    inBlock = null;\n  } // Block Tags\n\n\n  var blockInfo = checkBlockType(nodeName, node, lastList, inBlock);\n  var blockType;\n  var blockDataMap;\n\n  if (blockInfo === false) {\n    return getEmptyChunk();\n  }\n\n  blockInfo = blockInfo || {};\n\n  if (typeof blockInfo === 'string') {\n    blockType = blockInfo;\n    blockDataMap = Map();\n  } else {\n    blockType = typeof blockInfo === 'string' ? blockInfo : blockInfo.type;\n    blockDataMap = blockInfo.data ? Map(blockInfo.data) : Map();\n  }\n\n  if (!inBlock && (fragmentBlockTags.indexOf(nodeName) !== -1 || blockType)) {\n    chunk = getBlockDividerChunk(blockType || getBlockTypeForTag(nodeName, lastList), depth, blockDataMap);\n    inBlock = blockType || getBlockTypeForTag(nodeName, lastList);\n    newBlock = true;\n  } else if (lastList && (inBlock === 'ordered-list-item' || inBlock === 'unordered-list-item') && nodeName === 'li') {\n    var listItemBlockType = getBlockTypeForTag(nodeName, lastList);\n    chunk = getBlockDividerChunk(listItemBlockType, depth);\n    inBlock = listItemBlockType;\n    newBlock = true;\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  } else if (inBlock && inBlock !== 'atomic' && blockType === 'atomic') {\n    inBlock = blockType;\n    newBlock = true;\n    chunk = getSoftNewlineChunk(blockType, depth, true, // atomic blocks within non-atomic blocks must always be split out\n    blockDataMap);\n  } // Recurse through children\n\n\n  var child = node.firstChild; // hack to allow conversion of atomic blocks from HTML (e.g. <figure><img\n  // src=\"...\" /></figure>). since metadata must be stored on an entity text\n  // must exist for the entity to apply to. the way chunks are joined strips\n  // whitespace at the end so it cannot be a space character.\n\n  if (child == null && inEntity && (blockType === 'atomic' || inBlock === 'atomic')) {\n    child = document.createTextNode('a');\n  }\n\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n\n  while (child) {\n    entityId = checkEntityNode(nodeName, child, createEntity, getEntity, mergeEntityData, replaceEntityData);\n    newChunk = genFragment(child, inlineStyle, lastList, inBlock, fragmentBlockTags, depth, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, entityId || inEntity);\n    chunk = joinChunks(chunk, newChunk, options.flat);\n    var sibling = child.nextSibling; // Put in a newline to break up blocks inside blocks\n\n    if (sibling && fragmentBlockTags.indexOf(nodeName) >= 0 && inBlock) {\n      var newBlockInfo = checkBlockType(nodeName, child, lastList, inBlock);\n      var newBlockType = void 0;\n      var newBlockData = void 0;\n\n      if (newBlockInfo !== false) {\n        newBlockInfo = newBlockInfo || {};\n\n        if (typeof newBlockInfo === 'string') {\n          newBlockType = newBlockInfo;\n          newBlockData = Map();\n        } else {\n          newBlockType = newBlockInfo.type || getBlockTypeForTag(nodeName, lastList);\n          newBlockData = newBlockInfo.data ? Map(newBlockInfo.data) : Map();\n        }\n\n        chunk = joinChunks(chunk, getSoftNewlineChunk(newBlockType, depth, options.flat, newBlockData), options.flat);\n      }\n    }\n\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth, Map()), options.flat);\n  }\n\n  return chunk;\n}\n\nfunction getChunkForHTML(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE);\n  var safeBody = DOMBuilder(html);\n\n  if (!safeBody) {\n    return null;\n  } // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n\n\n  var workingBlocks = containsSemanticBlockMarkup(html) ? blockTags.concat(['div']) : ['div']; // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to sta rt with.\n\n  var chunk = genFragment(safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options); // join with previous block to prevent weirdness on paste\n\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  } // Kill block delimiter at the end\n\n\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  } // If we saw no block tags, put an unstyled one in\n\n\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push({\n      type: 'unstyled',\n      data: Map(),\n      depth: 0\n    });\n  } // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n\n\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({\n      type: 'unstyled',\n      data: Map(),\n      depth: 0\n    });\n  }\n\n  return chunk;\n}\n\nfunction convertFromHTMLtoContentBlocks(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder, generateKey) {\n  // Be ABSOLUTELY SURE that the dom builder you pass hare won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  var chunk = getChunkForHTML(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder, generateKey);\n\n  if (chunk == null) {\n    return [];\n  }\n\n  var start = 0;\n  return chunk.text.split('\\r').map(function (textBlock, blockIndex) {\n    // Make absolutely certain that our text is acceptable.\n    textBlock = sanitizeDraftText(textBlock);\n    var end = start + textBlock.length;\n    var inlines = nullthrows(chunk).inlines.slice(start, end);\n    var entities = nullthrows(chunk).entities.slice(start, end);\n    var characterList = List(inlines.map(function (style, entityIndex) {\n      var data = {\n        style: style,\n        entity: null\n      };\n\n      if (entities[entityIndex]) {\n        data.entity = entities[entityIndex];\n      }\n\n      return CharacterMetadata.create(data);\n    }));\n    start = end + 1;\n    return new ContentBlock({\n      key: generateKey(),\n      type: nullthrows(chunk).blocks[blockIndex].type,\n      data: nullthrows(chunk).blocks[blockIndex].data,\n      depth: nullthrows(chunk).blocks[blockIndex].depth,\n      text: textBlock,\n      characterList: characterList\n    });\n  });\n}\n\nvar convertFromHTML = function convertFromHTML(_ref2) {\n  var _ref2$htmlToStyle = _ref2.htmlToStyle,\n      htmlToStyle = _ref2$htmlToStyle === void 0 ? defaultHTMLToStyle : _ref2$htmlToStyle,\n      _ref2$htmlToEntity = _ref2.htmlToEntity,\n      htmlToEntity = _ref2$htmlToEntity === void 0 ? defaultHTMLToEntity : _ref2$htmlToEntity,\n      _ref2$textToEntity = _ref2.textToEntity,\n      textToEntity = _ref2$textToEntity === void 0 ? defaultTextToEntity : _ref2$textToEntity,\n      _ref2$htmlToBlock = _ref2.htmlToBlock,\n      htmlToBlock = _ref2$htmlToBlock === void 0 ? defaultHTMLToBlock : _ref2$htmlToBlock;\n  return function (html) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      flat: false\n    };\n    var DOMBuilder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSafeBodyFromHTML;\n    var generateKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : genKey;\n    var contentState = ContentState.createFromText('');\n\n    var createEntityWithContentState = function createEntityWithContentState() {\n      if (contentState.createEntity) {\n        var _contentState;\n\n        contentState = (_contentState = contentState).createEntity.apply(_contentState, arguments);\n        return contentState.getLastCreatedEntityKey();\n      }\n\n      return Entity.create.apply(Entity, arguments);\n    };\n\n    var getEntityWithContentState = function getEntityWithContentState() {\n      if (contentState.getEntity) {\n        var _contentState2;\n\n        return (_contentState2 = contentState).getEntity.apply(_contentState2, arguments);\n      }\n\n      return Entity.get.apply(Entity, arguments);\n    };\n\n    var mergeEntityDataWithContentState = function mergeEntityDataWithContentState() {\n      if (contentState.mergeEntityData) {\n        var _contentState3;\n\n        contentState = (_contentState3 = contentState).mergeEntityData.apply(_contentState3, arguments);\n        return;\n      }\n\n      Entity.mergeData.apply(Entity, arguments);\n    };\n\n    var replaceEntityDataWithContentState = function replaceEntityDataWithContentState() {\n      if (contentState.replaceEntityData) {\n        var _contentState4;\n\n        contentState = (_contentState4 = contentState).replaceEntityData.apply(_contentState4, arguments);\n        return;\n      }\n\n      Entity.replaceData.apply(Entity, arguments);\n    };\n\n    var contentBlocks = convertFromHTMLtoContentBlocks(html, handleMiddleware(htmlToStyle, baseProcessInlineTag), handleMiddleware(htmlToEntity, defaultHTMLToEntity), handleMiddleware(textToEntity, defaultTextToEntity), handleMiddleware(htmlToBlock, baseCheckBlockType), createEntityWithContentState, getEntityWithContentState, mergeEntityDataWithContentState, replaceEntityDataWithContentState, options, DOMBuilder, generateKey);\n    var blockMap = BlockMapBuilder.createFromArray(contentBlocks);\n    var firstBlockKey = contentBlocks[0].getKey();\n    return contentState.merge({\n      blockMap: blockMap,\n      selectionBefore: SelectionState.createEmpty(firstBlockKey),\n      selectionAfter: SelectionState.createEmpty(firstBlockKey)\n    });\n  };\n};\n\nexport default (function () {\n  if (arguments.length >= 1 && typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n    return convertFromHTML({}).apply(void 0, arguments);\n  }\n\n  return convertFromHTML.apply(void 0, arguments);\n});","map":{"version":3,"names":["List","OrderedSet","Map","ContentState","CharacterMetadata","ContentBlock","Entity","BlockMapBuilder","genKey","SelectionState","getSafeBodyFromHTML","rangeSort","NBSP","SPACE","MAX_DEPTH","REGEX_CR","RegExp","REGEX_LF","REGEX_NBSP","REGEX_BLOCK_DELIMITER","blockTags","inlineTags","b","code","del","em","i","s","strike","strong","u","handleMiddleware","maybeMiddleware","base","__isMiddleware","defaultHTMLToBlock","nodeName","node","lastList","undefined","defaultHTMLToStyle","currentStyle","defaultHTMLToEntity","defaultTextToEntity","text","nullthrows","x","Error","sanitizeDraftText","input","replace","getEmptyChunk","inlines","entities","blocks","getWhitespaceChunk","inEntity","Array","getSoftNewlineChunk","block","depth","flat","arguments","length","data","type","Math","max","min","isNewline","getBlockDividerChunk","getBlockTypeForTag","tag","baseCheckBlockType","processInlineTag","styleToCheck","add","toOrderedSet","HTMLElement","htmlElement","withMutations","style","fontWeight","fontStyle","textDecoration","baseProcessInlineTag","inlineStyles","joinChunks","A","B","firstInB","slice","lastInA","adjacentDividers","isJoiningBlocks","addingNewlineToEmptyBlock","pop","shift","concat","containsSemanticBlockMarkup","html","some","indexOf","genFragment","inlineStyle","inBlock","fragmentBlockTags","processCustomInlineStyles","checkEntityNode","checkEntityText","checkBlockType","createEntity","getEntity","mergeEntityData","replaceEntityData","options","toLowerCase","newBlock","nextBlockType","textContent","trim","fill","offsetChange","textEntities","sort","forEach","_ref","entity","offset","result","adjustedOffset","substr","textArray","split","splice","bind","apply","join","_blockType","chunk","newChunk","blockInfo","blockType","blockDataMap","listItemBlockType","child","firstChild","document","createTextNode","entityId","sibling","nextSibling","newBlockInfo","newBlockType","newBlockData","getChunkForHTML","DOMBuilder","safeBody","workingBlocks","push","unshift","convertFromHTMLtoContentBlocks","generateKey","start","map","textBlock","blockIndex","end","characterList","entityIndex","create","key","convertFromHTML","_ref2","_ref2$htmlToStyle","htmlToStyle","_ref2$htmlToEntity","htmlToEntity","_ref2$textToEntity","textToEntity","_ref2$htmlToBlock","htmlToBlock","contentState","createFromText","createEntityWithContentState","_contentState","getLastCreatedEntityKey","getEntityWithContentState","_contentState2","get","mergeEntityDataWithContentState","_contentState3","mergeData","replaceEntityDataWithContentState","_contentState4","replaceData","contentBlocks","blockMap","createFromArray","firstBlockKey","getKey","merge","selectionBefore","createEmpty","selectionAfter"],"sources":["/Users/macuser/Documents/amccar15.github.io/node_modules/draft-convert/esm/convertFromHTML.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the /src directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\nimport { List, OrderedSet, Map } from 'immutable';\nimport { ContentState, CharacterMetadata, ContentBlock, Entity, BlockMapBuilder, genKey, SelectionState } from 'draft-js';\nimport getSafeBodyFromHTML from './util/parseHTML';\nimport rangeSort from './util/rangeSort';\nvar NBSP = '&nbsp;';\nvar SPACE = ' '; // Arbitrary max indent\n\nvar MAX_DEPTH = 4; // used for replacing characters in HTML\n\n/* eslint-disable no-control-regex */\n\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\nvar REGEX_BLOCK_DELIMITER = new RegExp('\\r', 'g');\n/* eslint-enable no-control-regex */\n// Block tag flow is different because LIs do not have\n// a deterministic style ;_;\n\nvar blockTags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'blockquote', 'pre'];\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\n\nvar handleMiddleware = function handleMiddleware(maybeMiddleware, base) {\n  if (maybeMiddleware && maybeMiddleware.__isMiddleware === true) {\n    return maybeMiddleware(base);\n  }\n\n  return maybeMiddleware;\n};\n\nvar defaultHTMLToBlock = function defaultHTMLToBlock(nodeName, node, lastList) {\n  return undefined;\n};\n\nvar defaultHTMLToStyle = function defaultHTMLToStyle(nodeName, node, currentStyle) {\n  return currentStyle;\n};\n\nvar defaultHTMLToEntity = function defaultHTMLToEntity(nodeName, node) {\n  return undefined;\n};\n\nvar defaultTextToEntity = function defaultTextToEntity(text) {\n  return [];\n};\n\nvar nullthrows = function nullthrows(x) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error('Got unexpected null or undefined');\n};\n\nvar sanitizeDraftText = function sanitizeDraftText(input) {\n  return input.replace(REGEX_BLOCK_DELIMITER, '');\n};\n\nfunction getEmptyChunk() {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: []\n  };\n}\n\nfunction getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n\n  return {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities,\n    blocks: []\n  };\n}\n\nfunction getSoftNewlineChunk(block, depth) {\n  var flat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Map();\n\n  if (flat === true) {\n    return {\n      text: '\\r',\n      inlines: [OrderedSet()],\n      entities: new Array(1),\n      blocks: [{\n        type: block,\n        data: data,\n        depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n      }],\n      isNewline: true\n    };\n  }\n\n  return {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: []\n  };\n}\n\nfunction getBlockDividerChunk(block, depth) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Map();\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [{\n      type: block,\n      data: data,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    }]\n  };\n}\n\nfunction getBlockTypeForTag(tag, lastList) {\n  switch (tag) {\n    case 'h1':\n      return 'header-one';\n\n    case 'h2':\n      return 'header-two';\n\n    case 'h3':\n      return 'header-three';\n\n    case 'h4':\n      return 'header-four';\n\n    case 'h5':\n      return 'header-five';\n\n    case 'h6':\n      return 'header-six';\n\n    case 'li':\n      if (lastList === 'ol') {\n        return 'ordered-list-item';\n      }\n\n      return 'unordered-list-item';\n\n    case 'blockquote':\n      return 'blockquote';\n\n    case 'pre':\n      return 'code-block';\n\n    case 'div':\n    case 'p':\n      return 'unstyled';\n\n    default:\n      return null;\n  }\n}\n\nfunction baseCheckBlockType(nodeName, node, lastList) {\n  return getBlockTypeForTag(nodeName, lastList);\n}\n\nfunction processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    var htmlElement = node;\n    currentStyle = currentStyle.withMutations(function (style) {\n      if (htmlElement.style.fontWeight === 'bold') {\n        style.add('BOLD');\n      }\n\n      if (htmlElement.style.fontStyle === 'italic') {\n        style.add('ITALIC');\n      }\n\n      if (htmlElement.style.textDecoration === 'underline') {\n        style.add('UNDERLINE');\n      }\n\n      if (htmlElement.style.textDecoration === 'line-through') {\n        style.add('STRIKETHROUGH');\n      }\n    }).toOrderedSet();\n  }\n\n  return currentStyle;\n}\n\nfunction baseProcessInlineTag(tag, node) {\n  var inlineStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OrderedSet();\n  return processInlineTag(tag, node, inlineStyles);\n}\n\nfunction joinChunks(A, B) {\n  var flat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n  var firstInB = B.text.slice(0, 1);\n  var lastInA = A.text.slice(-1);\n  var adjacentDividers = lastInA === '\\r' && firstInB === '\\r';\n  var isJoiningBlocks = A.text !== '\\r' && B.text !== '\\r'; // when joining two full blocks like this we want to pop one divider\n\n  var addingNewlineToEmptyBlock = A.text === '\\r' && !A.isNewline && B.isNewline; // when joining a newline to an empty block we want to remove the newline\n\n  if (adjacentDividers && (isJoiningBlocks || addingNewlineToEmptyBlock)) {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  } // Kill whitespace after blocks if flat mode is on\n\n\n  if (A.text.slice(-1) === '\\r' && flat === true) {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (firstInB === SPACE || firstInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  var isNewline = A.text.length === 0 && B.isNewline;\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks),\n    isNewline: isNewline\n  };\n}\n/*\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\n\n\nfunction containsSemanticBlockMarkup(html) {\n  return blockTags.some(function (tag) {\n    return html.indexOf(\"<\".concat(tag)) !== -1;\n  });\n}\n\nfunction genFragment(node, inlineStyle, lastList, inBlock, fragmentBlockTags, depth, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, inEntity) {\n  var nodeName = node.nodeName.toLowerCase();\n  var newBlock = false;\n  var nextBlockType = 'unstyled'; // Base Case\n\n  if (nodeName === '#text') {\n    var text = node.textContent;\n\n    if (text.trim() === '' && inBlock === null) {\n      return getEmptyChunk();\n    }\n\n    if (text.trim() === '' && inBlock !== 'code-block') {\n      return getWhitespaceChunk(inEntity);\n    }\n\n    if (inBlock !== 'code-block') {\n      // Can't use empty string because MSWord\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    var entities = Array(text.length).fill(inEntity);\n    var offsetChange = 0;\n    var textEntities = checkEntityText(text, createEntity, getEntity, mergeEntityData, replaceEntityData).sort(rangeSort);\n    textEntities.forEach(function (_ref) {\n      var entity = _ref.entity,\n          offset = _ref.offset,\n          length = _ref.length,\n          result = _ref.result;\n      var adjustedOffset = offset + offsetChange;\n\n      if (result === null || result === undefined) {\n        result = text.substr(adjustedOffset, length);\n      }\n\n      var textArray = text.split('');\n      textArray.splice.bind(textArray, adjustedOffset, length).apply(textArray, result.split(''));\n      text = textArray.join('');\n      entities.splice.bind(entities, adjustedOffset, length).apply(entities, Array(result.length).fill(entity));\n      offsetChange += result.length - length;\n    });\n    return {\n      text: text,\n      inlines: Array(text.length).fill(inlineStyle),\n      entities: entities,\n      blocks: []\n    };\n  } // BR tags\n\n\n  if (nodeName === 'br') {\n    var _blockType = inBlock;\n\n    if (_blockType === null) {\n      //  BR tag is at top level, treat it as an unstyled block\n      return getSoftNewlineChunk('unstyled', depth, true);\n    }\n\n    return getSoftNewlineChunk(_blockType || 'unstyled', depth, options.flat);\n  }\n\n  var chunk = getEmptyChunk();\n  var newChunk = null; // Inline tags\n\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n  inlineStyle = processCustomInlineStyles(nodeName, node, inlineStyle); // Handle lists\n\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n\n    lastList = nodeName;\n    inBlock = null;\n  } // Block Tags\n\n\n  var blockInfo = checkBlockType(nodeName, node, lastList, inBlock);\n  var blockType;\n  var blockDataMap;\n\n  if (blockInfo === false) {\n    return getEmptyChunk();\n  }\n\n  blockInfo = blockInfo || {};\n\n  if (typeof blockInfo === 'string') {\n    blockType = blockInfo;\n    blockDataMap = Map();\n  } else {\n    blockType = typeof blockInfo === 'string' ? blockInfo : blockInfo.type;\n    blockDataMap = blockInfo.data ? Map(blockInfo.data) : Map();\n  }\n\n  if (!inBlock && (fragmentBlockTags.indexOf(nodeName) !== -1 || blockType)) {\n    chunk = getBlockDividerChunk(blockType || getBlockTypeForTag(nodeName, lastList), depth, blockDataMap);\n    inBlock = blockType || getBlockTypeForTag(nodeName, lastList);\n    newBlock = true;\n  } else if (lastList && (inBlock === 'ordered-list-item' || inBlock === 'unordered-list-item') && nodeName === 'li') {\n    var listItemBlockType = getBlockTypeForTag(nodeName, lastList);\n    chunk = getBlockDividerChunk(listItemBlockType, depth);\n    inBlock = listItemBlockType;\n    newBlock = true;\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  } else if (inBlock && inBlock !== 'atomic' && blockType === 'atomic') {\n    inBlock = blockType;\n    newBlock = true;\n    chunk = getSoftNewlineChunk(blockType, depth, true, // atomic blocks within non-atomic blocks must always be split out\n    blockDataMap);\n  } // Recurse through children\n\n\n  var child = node.firstChild; // hack to allow conversion of atomic blocks from HTML (e.g. <figure><img\n  // src=\"...\" /></figure>). since metadata must be stored on an entity text\n  // must exist for the entity to apply to. the way chunks are joined strips\n  // whitespace at the end so it cannot be a space character.\n\n  if (child == null && inEntity && (blockType === 'atomic' || inBlock === 'atomic')) {\n    child = document.createTextNode('a');\n  }\n\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n\n  while (child) {\n    entityId = checkEntityNode(nodeName, child, createEntity, getEntity, mergeEntityData, replaceEntityData);\n    newChunk = genFragment(child, inlineStyle, lastList, inBlock, fragmentBlockTags, depth, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, entityId || inEntity);\n    chunk = joinChunks(chunk, newChunk, options.flat);\n    var sibling = child.nextSibling; // Put in a newline to break up blocks inside blocks\n\n    if (sibling && fragmentBlockTags.indexOf(nodeName) >= 0 && inBlock) {\n      var newBlockInfo = checkBlockType(nodeName, child, lastList, inBlock);\n      var newBlockType = void 0;\n      var newBlockData = void 0;\n\n      if (newBlockInfo !== false) {\n        newBlockInfo = newBlockInfo || {};\n\n        if (typeof newBlockInfo === 'string') {\n          newBlockType = newBlockInfo;\n          newBlockData = Map();\n        } else {\n          newBlockType = newBlockInfo.type || getBlockTypeForTag(nodeName, lastList);\n          newBlockData = newBlockInfo.data ? Map(newBlockInfo.data) : Map();\n        }\n\n        chunk = joinChunks(chunk, getSoftNewlineChunk(newBlockType, depth, options.flat, newBlockData), options.flat);\n      }\n    }\n\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth, Map()), options.flat);\n  }\n\n  return chunk;\n}\n\nfunction getChunkForHTML(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE);\n  var safeBody = DOMBuilder(html);\n\n  if (!safeBody) {\n    return null;\n  } // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n\n\n  var workingBlocks = containsSemanticBlockMarkup(html) ? blockTags.concat(['div']) : ['div']; // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to sta rt with.\n\n  var chunk = genFragment(safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options); // join with previous block to prevent weirdness on paste\n\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  } // Kill block delimiter at the end\n\n\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  } // If we saw no block tags, put an unstyled one in\n\n\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push({\n      type: 'unstyled',\n      data: Map(),\n      depth: 0\n    });\n  } // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n\n\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({\n      type: 'unstyled',\n      data: Map(),\n      depth: 0\n    });\n  }\n\n  return chunk;\n}\n\nfunction convertFromHTMLtoContentBlocks(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder, generateKey) {\n  // Be ABSOLUTELY SURE that the dom builder you pass hare won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n  var chunk = getChunkForHTML(html, processCustomInlineStyles, checkEntityNode, checkEntityText, checkBlockType, createEntity, getEntity, mergeEntityData, replaceEntityData, options, DOMBuilder, generateKey);\n\n  if (chunk == null) {\n    return [];\n  }\n\n  var start = 0;\n  return chunk.text.split('\\r').map(function (textBlock, blockIndex) {\n    // Make absolutely certain that our text is acceptable.\n    textBlock = sanitizeDraftText(textBlock);\n    var end = start + textBlock.length;\n    var inlines = nullthrows(chunk).inlines.slice(start, end);\n    var entities = nullthrows(chunk).entities.slice(start, end);\n    var characterList = List(inlines.map(function (style, entityIndex) {\n      var data = {\n        style: style,\n        entity: null\n      };\n\n      if (entities[entityIndex]) {\n        data.entity = entities[entityIndex];\n      }\n\n      return CharacterMetadata.create(data);\n    }));\n    start = end + 1;\n    return new ContentBlock({\n      key: generateKey(),\n      type: nullthrows(chunk).blocks[blockIndex].type,\n      data: nullthrows(chunk).blocks[blockIndex].data,\n      depth: nullthrows(chunk).blocks[blockIndex].depth,\n      text: textBlock,\n      characterList: characterList\n    });\n  });\n}\n\nvar convertFromHTML = function convertFromHTML(_ref2) {\n  var _ref2$htmlToStyle = _ref2.htmlToStyle,\n      htmlToStyle = _ref2$htmlToStyle === void 0 ? defaultHTMLToStyle : _ref2$htmlToStyle,\n      _ref2$htmlToEntity = _ref2.htmlToEntity,\n      htmlToEntity = _ref2$htmlToEntity === void 0 ? defaultHTMLToEntity : _ref2$htmlToEntity,\n      _ref2$textToEntity = _ref2.textToEntity,\n      textToEntity = _ref2$textToEntity === void 0 ? defaultTextToEntity : _ref2$textToEntity,\n      _ref2$htmlToBlock = _ref2.htmlToBlock,\n      htmlToBlock = _ref2$htmlToBlock === void 0 ? defaultHTMLToBlock : _ref2$htmlToBlock;\n  return function (html) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      flat: false\n    };\n    var DOMBuilder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSafeBodyFromHTML;\n    var generateKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : genKey;\n    var contentState = ContentState.createFromText('');\n\n    var createEntityWithContentState = function createEntityWithContentState() {\n      if (contentState.createEntity) {\n        var _contentState;\n\n        contentState = (_contentState = contentState).createEntity.apply(_contentState, arguments);\n        return contentState.getLastCreatedEntityKey();\n      }\n\n      return Entity.create.apply(Entity, arguments);\n    };\n\n    var getEntityWithContentState = function getEntityWithContentState() {\n      if (contentState.getEntity) {\n        var _contentState2;\n\n        return (_contentState2 = contentState).getEntity.apply(_contentState2, arguments);\n      }\n\n      return Entity.get.apply(Entity, arguments);\n    };\n\n    var mergeEntityDataWithContentState = function mergeEntityDataWithContentState() {\n      if (contentState.mergeEntityData) {\n        var _contentState3;\n\n        contentState = (_contentState3 = contentState).mergeEntityData.apply(_contentState3, arguments);\n        return;\n      }\n\n      Entity.mergeData.apply(Entity, arguments);\n    };\n\n    var replaceEntityDataWithContentState = function replaceEntityDataWithContentState() {\n      if (contentState.replaceEntityData) {\n        var _contentState4;\n\n        contentState = (_contentState4 = contentState).replaceEntityData.apply(_contentState4, arguments);\n        return;\n      }\n\n      Entity.replaceData.apply(Entity, arguments);\n    };\n\n    var contentBlocks = convertFromHTMLtoContentBlocks(html, handleMiddleware(htmlToStyle, baseProcessInlineTag), handleMiddleware(htmlToEntity, defaultHTMLToEntity), handleMiddleware(textToEntity, defaultTextToEntity), handleMiddleware(htmlToBlock, baseCheckBlockType), createEntityWithContentState, getEntityWithContentState, mergeEntityDataWithContentState, replaceEntityDataWithContentState, options, DOMBuilder, generateKey);\n    var blockMap = BlockMapBuilder.createFromArray(contentBlocks);\n    var firstBlockKey = contentBlocks[0].getKey();\n    return contentState.merge({\n      blockMap: blockMap,\n      selectionBefore: SelectionState.createEmpty(firstBlockKey),\n      selectionAfter: SelectionState.createEmpty(firstBlockKey)\n    });\n  };\n};\n\nexport default (function () {\n  if (arguments.length >= 1 && typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {\n    return convertFromHTML({}).apply(void 0, arguments);\n  }\n\n  return convertFromHTML.apply(void 0, arguments);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}