[{"/Users/macuser/Documents/amccar15.github.io/src/index.js":"1","/Users/macuser/Documents/amccar15.github.io/src/App.js":"2","/Users/macuser/Documents/amccar15.github.io/src/reportWebVitals.js":"3","/Users/macuser/Documents/amccar15.github.io/src/firebase-config.js":"4","/Users/macuser/Documents/amccar15.github.io/src/pages/Home.js":"5","/Users/macuser/Documents/amccar15.github.io/src/pages/CreatePost.js":"6","/Users/macuser/Documents/amccar15.github.io/src/pages/Login.js":"7","/Users/macuser/Documents/amccar15.github.io/src/pages/ThePost.js":"8","/Users/macuser/Documents/amccar15.github.io/src/pages/showSearch.js":"9"},{"size":542,"mtime":1663122707887,"results":"10","hashOfConfig":"11"},{"size":3718,"mtime":1670370612472,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1662742856594,"results":"13","hashOfConfig":"11"},{"size":983,"mtime":1669144794181,"results":"14","hashOfConfig":"11"},{"size":28553,"mtime":1670210752831,"results":"15","hashOfConfig":"11"},{"size":3091,"mtime":1668553803193,"results":"16","hashOfConfig":"11"},{"size":1948,"mtime":1670287604214,"results":"17","hashOfConfig":"11"},{"size":4160,"mtime":1669408947159,"results":"18","hashOfConfig":"11"},{"size":1970,"mtime":1669440671972,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"zja76o",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"23"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"23"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/Users/macuser/Documents/amccar15.github.io/src/index.js",[],[],[],"/Users/macuser/Documents/amccar15.github.io/src/App.js",["53","54"],[],"import React, { useEffect, useState } from 'react';\nimport {HashRouter, Routes, Route, Link, useNavigate} from \"react-router-dom\";\nimport \"./App.css\";\nimport ThePost from './pages/ThePost';\nimport Home from \"./pages/Home\";\nimport CreatePost from './pages/CreatePost';\nimport Login from \"./pages/Login\";\nimport ShowSearch from './pages/showSearch.js';\nimport {signOut} from 'firebase/auth';\nimport { auth } from './firebase-config';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n\n  document.title = \"The Agile Blog\"\n\n  const [isAuth, setIsAuth] = useState(localStorage.getItem(\"isAuth\"));\n\n  const [searchType, setSearchType] = useState(\"title\");\n\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const signUserOut = () => {\n    signOut(auth)\n      .then(() => {\n        localStorage.clear();\n        setIsAuth(false);\n        window.location.pathname = \"/\";\n      })\n  }\n\n  const handleTypeChange = (e) => {\n    setSearchType(e.target.value);\n  }\n\n  const handleInputChange = (e) => {\n    setSearchInput(e.target.value);\n  }\n\n  return (\n    <div>\n      <h1 className='headerTitle'>Welcome To THE Agile Blog</h1>\n      <HashRouter basename='/'>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\" className=\"navlink\"> Home </Link>\n              </li>\n                {!isAuth ? (\n                  <li>\n                    <Link to=\"/login\" className=\"navlink\"> Login </Link>\n                  </li>\n                  ) : (\n                    <>\n                      <li><Link to=\"/createpost\" class=\"navlink\"> Create Post </Link></li>\n                      <li class=\"navlink\" onClick={ signUserOut }> Log Out</li>\n                    </>\n                  )\n                }\n                <li className='custom-select'>\n                    <select name='searchType' onChange={(e) => handleTypeChange(e)}>\n                        <option selected=\"selected\" value={'title'}>Title</option>\n                        <option value={'author'}>Author</option>\n                    </select>\n                    <input type={\"text\"} placeholder=\"Search\" name=\"searchInput\" value={searchInput} onChange={(e) => handleInputChange(e)}/>\n                      <div className='searchButtonContainer'>\n                        <Link to={{pathname: '/showSearch/'+searchType+'/'+searchInput}} >\n                          <FontAwesomeIcon icon={ faMagnifyingGlass } size={\"3x\"} className=\"searchButton\"/>\n                        </Link>\n                      </div>\n                </li>\n            </ul>\n          </nav>\n          <Routes>\n            <Route path='/' element={<Home isAuth={isAuth} />} />\n            <Route path=\"/createpost\" element={<CreatePost isAuth={isAuth} />} />\n            <Route path='/login' element={<Login setIsAuth={setIsAuth} />} />\n            <Route path='/thepost/:id' element={<ThePost isAuth={isAuth}/>} />\n            <Route path='/showSearch/:type/:search' element={<ShowSearch />} />\n          </Routes>\n      </HashRouter>\n      <footer>\n        <div className='footerStyling'>\n          <div className='leftSection'>\n            <h1>Support</h1>\n            <p>Information</p>\n            <p>Terms of Service</p>\n            <p>Data Policy</p>\n          </div>\n          <div className='middleSection'>\n            <h1>Incase you missed it</h1>\n            <p>Login</p>\n            <p>Contact Us</p>\n          </div>\n          <div className='endSection'>\n            <h1>Location</h1>\n            <p>9201 University City Blvd, Charlotte, NC 28223</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/macuser/Documents/amccar15.github.io/src/reportWebVitals.js",[],[],"/Users/macuser/Documents/amccar15.github.io/src/firebase-config.js",["55"],[],"import { initializeApp } from \"firebase/app\";\nimport {getAuth, GoogleAuthProvider} from\"firebase/auth\";\nimport {getFirestore} from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyATCvyMoGTm3cn-bMOwQj4X9Tl2qujYvh4\",\n  authDomain: \"itis3300blog.firebaseapp.com\",\n  projectId: \"itis3300blog\",\n  storageBucket: \"itis3300blog.appspot.com\",\n  messagingSenderId: \"646791092317\",\n  appId: \"1:646791092317:web:c55489e3f85126ad0ad5b4\",\n  measurementId: \"G-S1TZEXDT1Y\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst storage = getStorage(app);\n\nexport const auth = getAuth(app);\nexport const providor = new GoogleAuthProvider();\n\nexport const db = getFirestore(app);","/Users/macuser/Documents/amccar15.github.io/src/pages/Home.js",[],[],"/Users/macuser/Documents/amccar15.github.io/src/pages/CreatePost.js",["56","57","58","59","60","61","62","63"],[],"import React, { useState, useEffect } from \"react\";\nimport {addDoc, collection} from 'firebase/firestore';\nimport { db, auth } from '../firebase-config';\nimport {useNavigate} from 'react-router-dom';\n\nimport { ContentState, Editor } from \"react-draft-wysiwyg\";\nimport draftToHtml from 'draftjs-to-html'; \nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport { convertFromRaw, convertToRaw, EditorState } from \"draft-js\";\nimport { convertFromHTML, convertToHTML } from \"draft-convert\";\n\nfunction CreatePost({ isAuth }) {\n\n    const [title, setTitle] = useState(\"\");\n\n    //rich text editor state\n    const [editorState, setEditorState] = useState(\n        {\n            message: \"Enter your post here!\",\n            rawMessage: '',\n        },\n    );\n\n    const [postText, setPostText] = useState(\n        {\n            convertMessage: '',\n            messagePost: ''\n        }\n    );\n\n    //firebase collection \n    const postsCollectionRef = collection(db, \"posts\");\n\n    //navigate function to navigate back to root file\n    let navigate = useNavigate();\n\n    //sending data to firebase\n    const createPost = async () => {\n        await addDoc(postsCollectionRef, {\n            title, \n            postText, \n            author: { name: auth.currentUser.displayName, id: auth.currentUser.uid },\n        });\n        navigate(\"/\");\n    };\n\n    //checking if user is logged in\n    useEffect(() => {\n        if(!isAuth) {\n            navigate(\"login\");\n        }\n    }, []);\n\n    //converting to raw html\n    const onEditorStateChange = (editorState) => {\n        setEditorState({\n            editorState,\n            rawMessage: convertToHTML(editorState.getCurrentContent())\n        })\n    }\n    \n    //handling the message from rich text editor\n    const handleEditorStateMessage = () => {\n        setEditorState({\n            message: editorState.rawMessage\n        });\n        setPostText({\n            messagePost: postText.convertMessage\n        });\n        console.log(\"editorstate: \", editorState.rawMessage);\n        console.log(\"postText: \", postText.convertMessage);\n    }\n\n    return (\n        <div className=\"createPostPage\"> \n            <div className=\"cpContainer\">\n                <h1> Create a Post</h1>\n                <div className=\"inputGp\">\n                    <label> Title: </label>\n                    <input placeholder=\"Title...\" \n                        onChange={(event) => {\n                            setTitle(event.target.value)\n                            }\n                        }\n                    />\n                </div>\n                <br></br>\n                <Editor \n                    initialEditorState={editorState}\n                    onEditorStateChange={onEditorStateChange}\n                    toolbarClassName=\"toolbarClassName\"\n                    wrapperClassName=\"wrapperClassName\"\n                    editorClassName=\"editorClassName\" \n                />\n                <button onClick={() => {handleEditorStateMessage();}}> Submit Post</button>\n            </div>\n        </div>\n    );\n}\n\nexport default CreatePost;","/Users/macuser/Documents/amccar15.github.io/src/pages/Login.js",[],[],"/Users/macuser/Documents/amccar15.github.io/src/pages/ThePost.js",["64","65","66"],[],"import { useParams } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { auth, db } from '../firebase-config';\nimport { collection, doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\n\nfunction ThePost({ isAuth }) {\n\n    const { id } = useParams();\n\n    const postsCollectionRef = collection(db, \"posts\");\n\n    const [docDetails, setDocDetails] = useState([]);\n\n    const [seeAuthorName, setAuthorName] = useState([]);\n\n    const [seeAuthorID, setAuthorID] = useState([]);\n\n    const [image, setImage] = useState(null);\n\n    const storage = getStorage();\n\n    const onImageChange = (e) => {\n        const reader = new FileReader();\n        let file = e.target.files[0];\n\n        if (file) {\n            reader.onload = () => {\n                if(reader.readyState === 2) {\n                    console.log(file);\n                    setImage(file);\n                }\n            };\n            reader.readAsDataURL(e.target.files[0]);\n        }\n        else {\n            setImage(null);\n        }\n    }\n\n    const uploadPhoto = () => {\n        if(image != null) {\n            const storageRef = ref(storage, \"image/\"+id);\n\n            const uploadTask = uploadBytesResumable(storageRef, image);\n\n            uploadTask.on('state_changed', (snapshot) => {\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log(\"Upload is: \" + progress + \"% done\");\n                switch (snapshot.state) {\n                    case 'paused':\n                        console.log(\"Upload is paused\");\n                        break;\n                    case 'running':\n                        console.log('Upload is running');\n                        break;\n                }\n            }, (error) => {\n                alert(\"Image upload failed\");\n                console.log(error);\n            }, () => {\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File link at :', downloadURL);\n                    const postDoc = doc(postsCollectionRef, id);\n                    updateDoc(postDoc, {\n                        imageExist: downloadURL,\n                    });\n                    getPost(id);\n                });\n            })\n        }\n    }\n\n    useEffect(() => {\n        getPost(id);\n    }, []);\n\n    const getPost = async (postID) => {\n        const postDoc = doc(postsCollectionRef, postID);\n        const docSnap = await getDoc(postDoc);\n        setDocDetails(docSnap.data());\n\n        if(docSnap.exists()) {\n            setAuthorName(docSnap.data().author.name);                \n            setAuthorID(docSnap.data().author.id);\n        } else {\n            console.log(\"Error\");\n        }        \n    };\n\n    return (\n        <div className=\"thePost\"> \n            <div className=\"postHeader\">\n                {isAuth && seeAuthorID === auth.currentUser.uid && (\n                    <div>\n                        <input type=\"file\" accept=\"image/x-png, image/jpeg\" onChange={(e) => onImageChange(e)}/>\n                        <button onClick={() => uploadPhoto()}>\n                            Add Image\n                        </button>\n                    </div>\n                )}\n                {docDetails.imageExist !== '' && (\n                    <div>\n                        <img className=\"headerImg\" src={docDetails.imageExist} />\n                        <div className=\"postHeadContainer\">\n                            <h1 className=\"postHeadTitle\"> {docDetails.title} </h1>\n                        </div>\n                    </div>\n                )}\n                {docDetails.imageExist === '' && (\n                    <div>\n                        <h1 className=\"noPhotoTitle\">{docDetails.title}</h1>\n                    </div>\n                )}\n            </div>\n            <hr />\n            <div className=\"postTextContainer\"> {docDetails.postText} </div>\n                <h3> \n                    @{seeAuthorName}\n                </h3>\n            </div>\n    );\n}\n\nexport default ThePost;","/Users/macuser/Documents/amccar15.github.io/src/pages/showSearch.js",["67"],[],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {collection, getDocs, query, where} from 'firebase/firestore';\nimport { db } from '../firebase-config';\nimport { Link } from \"react-router-dom\";\n\nfunction ShowSearch() {\n\n    const {type, search} = useParams();\n\n    const postsCollectionRef = collection(db, \"posts\");\n\n    const [post, setPost] = useState([]);\n\n    useEffect(() => {\n        if(type === 'title') {\n            const q = query(postsCollectionRef, where(type, '>=', search));\n            getPosts(q);\n        }\n        if(type === 'author') {\n            const q = query(postsCollectionRef, where(type+\".name\", '>=', search));\n            getPosts(q);\n        }\n    }, []);\n\n    const getPosts = async (qSearch) => {\n        const docData = await getDocs(qSearch);\n        setPost(docData.docs.map((doc) => (\n                {...doc.data(), id: doc.id}\n            )\n        ));\n    }\n\n    return(\n        <div>\n            {post !== null && post.map((p) => {\n                return <div className=\"post\" style={{backgroundColor: \"#7B8D8E\", margin: \"1em\", padding: \"1em\", borderRadius: \"1em\"}}> \n                <hr />\n                <div className=\"postHeader\">\n                    <div className=\"title\">\n                        <h1> {p.title} </h1>\n                    </div>\n                </div>\n                <div> \n                    <span className=\"openBtn\" key={p.id}>\n                        <Link className=\"viewPost\" to={{pathname: '/thepost/'+p.id}}> View Post</Link>\n                    </span>\n                </div>\n            <div className=\"postTextContainer\"> {p.postText} </div>\n                <h3>@{p.author.name}</h3>\n            </div>            \n            })}\n            <div>\n                {post && post.length === 0 && (\n                    <h1>No posts where found</h1>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ShowSearch;",{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"72","line":2,"column":42,"nodeType":"70","messageId":"71","endLine":2,"endColumn":53},{"ruleId":"68","severity":1,"message":"73","line":22,"column":7,"nodeType":"70","messageId":"71","endLine":22,"endColumn":14},{"ruleId":"68","severity":1,"message":"74","line":6,"column":10,"nodeType":"70","messageId":"71","endLine":6,"endColumn":22},{"ruleId":"68","severity":1,"message":"75","line":7,"column":8,"nodeType":"70","messageId":"71","endLine":7,"endColumn":19},{"ruleId":"68","severity":1,"message":"76","line":9,"column":10,"nodeType":"70","messageId":"71","endLine":9,"endColumn":24},{"ruleId":"68","severity":1,"message":"77","line":9,"column":26,"nodeType":"70","messageId":"71","endLine":9,"endColumn":38},{"ruleId":"68","severity":1,"message":"78","line":9,"column":40,"nodeType":"70","messageId":"71","endLine":9,"endColumn":51},{"ruleId":"68","severity":1,"message":"79","line":10,"column":10,"nodeType":"70","messageId":"71","endLine":10,"endColumn":25},{"ruleId":"68","severity":1,"message":"80","line":38,"column":11,"nodeType":"70","messageId":"71","endLine":38,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":52,"column":8,"nodeType":"83","endLine":52,"endColumn":10,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":50,"column":17,"nodeType":"87","messageId":"88","endLine":57,"endColumn":18},{"ruleId":"81","severity":1,"message":"89","line":76,"column":8,"nodeType":"83","endLine":76,"endColumn":10,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":104,"column":25,"nodeType":"93","endLine":104,"endColumn":82},{"ruleId":"81","severity":1,"message":"94","line":24,"column":8,"nodeType":"83","endLine":24,"endColumn":10,"suggestions":"95"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'storage' is assigned a value but never used.","'ContentState' is defined but never used.","'draftToHtml' is defined but never used.","'convertFromRaw' is defined but never used.","'convertToRaw' is defined but never used.","'EditorState' is defined but never used.","'convertFromHTML' is defined but never used.","'createPost' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAuth' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["96"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'getPost' and 'id'. Either include them or remove the dependency array.",["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'postsCollectionRef', 'search', and 'type'. Either include them or remove the dependency array.",["98"],{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [isAuth, navigate]",{"range":"105","text":"106"},"Update the dependencies array to be: [getPost, id]",{"range":"107","text":"108"},"Update the dependencies array to be: [postsCollectionRef, search, type]",{"range":"109","text":"110"},[1481,1483],"[isAuth, navigate]",[2434,2436],"[getPost, id]",[739,741],"[postsCollectionRef, search, type]"]