[{"/Users/macuser/Documents/amccar15.github.io/src/index.js":"1","/Users/macuser/Documents/amccar15.github.io/src/App.js":"2","/Users/macuser/Documents/amccar15.github.io/src/reportWebVitals.js":"3","/Users/macuser/Documents/amccar15.github.io/src/firebase-config.js":"4","/Users/macuser/Documents/amccar15.github.io/src/pages/Home.js":"5","/Users/macuser/Documents/amccar15.github.io/src/pages/CreatePost.js":"6","/Users/macuser/Documents/amccar15.github.io/src/pages/Login.js":"7","/Users/macuser/Documents/amccar15.github.io/src/pages/ThePost.js":"8"},{"size":542,"mtime":1663122707887,"results":"9","hashOfConfig":"10"},{"size":1590,"mtime":1663123451503,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1662742856594,"results":"12","hashOfConfig":"10"},{"size":983,"mtime":1663105431605,"results":"13","hashOfConfig":"10"},{"size":2371,"mtime":1663123461117,"results":"14","hashOfConfig":"10"},{"size":2566,"mtime":1663109403006,"results":"15","hashOfConfig":"10"},{"size":724,"mtime":1662742856593,"results":"16","hashOfConfig":"10"},{"size":1595,"mtime":1662742856594,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"bkimku",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"21"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"21"},"/Users/macuser/Documents/amccar15.github.io/src/index.js",[],[],[],"/Users/macuser/Documents/amccar15.github.io/src/App.js",["48"],[],"import React, { useState } from 'react';\nimport {HashRouter as Router, Routes, Route, Link, BrowserRouter} from \"react-router-dom\";\nimport \"./App.css\";\nimport ThePost from './pages/ThePost';\nimport Home from \"./pages/Home\";\nimport CreatePost from './pages/CreatePost';\nimport Login from \"./pages/Login\";\nimport {signOut} from 'firebase/auth';\nimport { auth } from './firebase-config';\n\nfunction App() {\n\n  const [isAuth, setIsAuth] = useState(localStorage.getItem(\"isAuth\"));\n\n  const signUserOut = () => {\n    signOut(auth)\n      .then(() => {\n        localStorage.clear();\n        setIsAuth(false);\n        window.location.pathname = \"/login\";\n      })\n  }\n\n  return (\n    <Router>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\" className=\"navlink\"> Home </Link>\n            </li>\n              {!isAuth ? (\n            <li>\n              <Link to=\"/login\" className=\"navlink\"> Login </Link>\n            </li>\n                ) : (\n                  <>\n                    <li><Link to=\"/createpost\" class=\"navlink\"> Create Post </Link></li>\n                    <li class=\"navlink\" onClick={ signUserOut }> Log Out</li>\n                  </>\n                )\n              }\n          </ul>\n        </nav>\n        <Routes>\n          <Route path='/' element={<Home isAuth={isAuth} />} />\n          <Route path=\"/createpost\" element={<CreatePost isAuth={isAuth} />} />\n          <Route path='/login' element={<Login setIsAuth={setIsAuth} />} />\n          <Route path='/thepost' element={<ThePost />} />\n        </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/macuser/Documents/amccar15.github.io/src/reportWebVitals.js",[],[],"/Users/macuser/Documents/amccar15.github.io/src/firebase-config.js",["49"],[],"import { initializeApp } from \"firebase/app\";\nimport {getAuth, GoogleAuthProvider} from\"firebase/auth\";\nimport {getFirestore} from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyATCvyMoGTm3cn-bMOwQj4X9Tl2qujYvh4\",\n  authDomain: \"itis3300blog.firebaseapp.com\",\n  projectId: \"itis3300blog\",\n  storageBucket: \"itis3300blog.appspot.com\",\n  messagingSenderId: \"646791092317\",\n  appId: \"1:646791092317:web:c55489e3f85126ad0ad5b4\",\n  measurementId: \"G-S1TZEXDT1Y\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst storage = getStorage(app);\n\nexport const auth = getAuth(app);\nexport const providor = new GoogleAuthProvider();\n\nexport const db = getFirestore(app);","/Users/macuser/Documents/amccar15.github.io/src/pages/Home.js",["50","51","52","53"],[],"import React, { useState, useEffect } from \"react\";\nimport {collection, getDocs, deleteDoc, doc} from 'firebase/firestore';\nimport { auth, db } from '../firebase-config';\nimport { Link } from 'react-router-dom';\nimport { getStorage, ref, getDownloadURL } from 'firebase/storage';\n\n\nfunction Home({ isAuth }) {\n    const [postLists, setPostList] = useState([]);\n\n    const postsCollectionRef = collection(db, \"posts\");\n\n    const deletePost = async (id) => {\n        const postDoc = doc(db, \"posts\", id);\n        await deleteDoc(postDoc);\n    }\n\n    useEffect(() => {\n        const getPosts = async () => {\n            const data = await getDocs(postsCollectionRef);\n            setPostList(data.docs.map((doc) => (\n                { ...doc.data(), id: doc.id}\n                )\n            ));\n        };\n        getPosts();\n    }, [deletePost]);\n\n    const storage = getStorage();\n    const starsRef = ref(storage, 'image/image.png');\n\n    return (\n        <div className=\"homePage\">\n            {postLists.map((post) => {\n                return <div className=\"post\"> \n                    <div className=\"post\">\n                            <div className=\"postHeader\">\n                                <div className=\"title\">\n                                    <h1> {post.title} </h1>\n                                </div>\n                                <div className=\"deletePost\">\n                                    {isAuth && post.author.id === auth.currentUser.uid && (\n                                        <button \n                                            onClick={() => {\n                                                deletePost(post.id);\n                                            }}> X \n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        <div className=\"postTextContainer\"> {post.postText} </div>\n                        <h3>@{post.author.name}</h3>\n                        <img id=\"myimg\"></img>\n                        <br/>\n                        <button>\n                            <Link to={{pathname: \"/thepost\"}} state={{postInfo: post.id}}> View Post</Link>\n                        </button>\n                    </div>\n                </div>\n            })}\n        </div>\n    );\n}\n\nexport default Home;","/Users/macuser/Documents/amccar15.github.io/src/pages/CreatePost.js",["54"],[],"import React, { useState, useEffect } from \"react\";\nimport {addDoc, collection} from 'firebase/firestore';\nimport { db, auth } from '../firebase-config';\nimport {useNavigate} from 'react-router-dom';\nimport { getStorage, ref, uploadBytes } from 'firebase/storage'\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nfunction CreatePost({ isAuth }) {\n\n    const [title, setTitle] = useState(\"\");\n    const [postText, setPostText] = useState(\"\");\n    const [imageExist, setImageExist] = useState(\"\");\n\n    const postsCollectionRef = collection(db, \"posts\");\n\n    let navigate = useNavigate();\n\n    const createPost = async () => {\n        await addDoc(postsCollectionRef, {\n            title, \n            postText, \n            author: { name: auth.currentUser.displayName, id: auth.currentUser.uid },\n            imageExist\n        });\n        navigate(\"/\");\n    };\n\n    useEffect(() => {\n        if(!isAuth) {\n            navigate(\"login\");\n        }\n    }, []);\n\n    const storage = getStorage();\n    const [image, setImage] = useState('');\n\n    const storageRef = ref(storage, 'image/image.png');\n\n    const upload = () => {\n        uploadBytes(storageRef, image).then((snapshot) => {\n            console.log(\"Uploaded file\");\n        });\n    }\n\n    return (\n        <div className=\"createPostPage\"> \n            <div className=\"cpContainer\">\n                <h1> Create a Post</h1>\n                <div className=\"inputGp\">\n                    <label> Title: </label>\n                    <input placeholder=\"Title...\" \n                        onChange={(event) => {\n                            setTitle(event.target.value)\n                            }\n                        }\n                    />\n                </div>\n                <div className=\"inputGp\">\n                    <label> Post: </label>\n                    <textarea placeholder=\"Post...\"\n                        onChange={(event) => {\n                            setPostText(event.target.value)\n                                }\n                        }\n                    />\n                </div>\n                <div>\n                    <input type=\"file\" \n                        onChange={(event) => {\n                            setImage(event.target.files[0])\n                            setImageExist(true);\n                            }\n                        } \n                    />\n                </div>\n                <button onClick={() => {upload(); createPost();}}> Submit Post</button>\n            </div>\n        </div>\n    );\n}\n\nexport default CreatePost;","/Users/macuser/Documents/amccar15.github.io/src/pages/Login.js",[],[],"/Users/macuser/Documents/amccar15.github.io/src/pages/ThePost.js",["55","56"],[],"import { useLocation } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { db } from '../firebase-config';\nimport { collection, doc, getDoc } from 'firebase/firestore';\n\nfunction ThePost() {\n\n    const location = useLocation();\n    const { postInfo } = location.state;\n\n    const postsCollectionRef = collection(db, \"posts\");\n\n    const [docDetails, setDocDetails] = useState([]);\n\n    const [seeAuthor, setAuthor] = useState([]);\n\n    const [authorID, setAuthorID] = useState([]);\n\n    useEffect(() => {\n        const getPost = async (id) => {\n            const postDoc = doc(postsCollectionRef, id);\n            const docSnap = await getDoc(postDoc);\n            setDocDetails(docSnap.data());\n    \n            if(docSnap.exists()) {\n                console.log(\"Document data: \", docSnap.data());\n\n                setAuthor(docSnap.data().author.name);\n                setAuthorID(docSnap.data().author.name);\n            } else {\n                console.log(\"Error\");\n            }\n        };\n        getPost(postInfo);\n    }, []);\n    \n    return (\n        <div className=\"homePage\">\n            <div className=\"post\"> \n                <div className=\"post\"> \n                    <div className=\"postHeader\">\n                        <h1> {docDetails.title} </h1>\n                    </div>\n                    <div className=\"postTextContainer\"> {docDetails.postText} </div>\n                    <h3> \n                        @{seeAuthor}\n                    </h3>\n                </div>\n            </div>\n        </div>  \n    );\n}\n\nexport default ThePost;",{"ruleId":"57","severity":1,"message":"58","line":2,"column":52,"nodeType":"59","messageId":"60","endLine":2,"endColumn":65},{"ruleId":"57","severity":1,"message":"61","line":22,"column":7,"nodeType":"59","messageId":"60","endLine":22,"endColumn":14},{"ruleId":"57","severity":1,"message":"62","line":5,"column":27,"nodeType":"59","messageId":"60","endLine":5,"endColumn":41},{"ruleId":"63","severity":1,"message":"64","line":27,"column":8,"nodeType":"65","endLine":27,"endColumn":20,"suggestions":"66"},{"ruleId":"57","severity":1,"message":"67","line":30,"column":11,"nodeType":"59","messageId":"60","endLine":30,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":53,"column":25,"nodeType":"70","endLine":53,"endColumn":41},{"ruleId":"63","severity":1,"message":"71","line":32,"column":8,"nodeType":"65","endLine":32,"endColumn":10,"suggestions":"72"},{"ruleId":"57","severity":1,"message":"73","line":17,"column":12,"nodeType":"59","messageId":"60","endLine":17,"endColumn":20},{"ruleId":"63","severity":1,"message":"74","line":35,"column":8,"nodeType":"65","endLine":35,"endColumn":10,"suggestions":"75"},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'storage' is assigned a value but never used.","'getDownloadURL' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postsCollectionRef'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'starsRef' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'isAuth' and 'navigate'. Either include them or remove the dependency array.",["77"],"'authorID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'postInfo' and 'postsCollectionRef'. Either include them or remove the dependency array.",["78"],{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [deletePost, postsCollectionRef]",{"range":"85","text":"86"},"Update the dependencies array to be: [isAuth, navigate]",{"range":"87","text":"88"},"Update the dependencies array to be: [postInfo, postsCollectionRef]",{"range":"89","text":"90"},[832,844],"[deletePost, postsCollectionRef]",[967,969],"[isAuth, navigate]",[1065,1067],"[postInfo, postsCollectionRef]"]